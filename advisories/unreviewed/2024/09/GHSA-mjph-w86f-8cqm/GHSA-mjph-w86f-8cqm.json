{
  "schema_version": "1.4.0",
  "id": "GHSA-mjph-w86f-8cqm",
  "modified": "2024-10-04T18:31:09Z",
  "published": "2024-09-27T15:30:34Z",
  "aliases": [
    "CVE-2024-46851"
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amd/display: Avoid race between dcn10_set_drr() and dc_state_destruct()\n\ndc_state_destruct() nulls the resource context of the DC state. The pipe\ncontext passed to dcn10_set_drr() is a member of this resource context.\n\nIf dc_state_destruct() is called parallel to the IRQ processing (which\ncalls dcn10_set_drr() at some point), we can end up using already nulled\nfunction callback fields of struct stream_resource.\n\nThe logic in dcn10_set_drr() already tries to avoid this, by checking tg\nagainst NULL. But if the nulling happens exactly after the NULL check and\nbefore the next access, then we get a race.\n\nAvoid this by copying tg first to a local variable, and then use this\nvariable for all the operations. This should work, as long as nobody\nfrees the resource pool where the timing generators live.\n\n(cherry picked from commit a3cc326a43bdc48fbdf53443e1027a03e309b643)",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H"
    }
  ],
  "affected": [],
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-46851"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/a7aeb03888b92304e2fc7d4d1c242f54a312561b"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/b6ce047a81f508f5c60756db8dfb5ff486e4dad0"
    }
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-476"
    ],
    "severity": "MODERATE",
    "github_reviewed": false,
    "github_reviewed_at": null,
    "nvd_published_at": "2024-09-27T13:15:16Z"
  }
}